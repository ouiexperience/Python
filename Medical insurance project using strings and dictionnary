medical_data = \
"""Marina Allison   ,27   ,   31.1 , 
#7010.0   ;Markus Valdez   ,   30, 
22.4,   #4050.0 ;Connie Ballard ,43 
,   25.3 , #12060.0 ;Darnell Weber   
,   35   , 20.6   , #7500.0;
Sylvie Charles   ,22, 22.1 
,#3022.0   ;   Vinay Padilla,24,   
26.9 ,#4620.0 ;Meredith Santiago, 51   , 
29.3 ,#16330.0;   Andre Mccarty, 
19,22.7 , #2900.0 ; 
Lorena Hodson ,65, 33.1 , #19370.0; 
Isaac Vu ,34, 24.8,   #7045.0"""

# 
print(medical_data)

# replace all # by $
updated_medical_data = medical_data.replace("#","$")
print(updated_medical_data)

# how many recors are in our data?
num_records = 0
for i in updated_medical_data:
  if i == "$":
    num_records += 1

print("There are " + str(num_records) + " medical records in the data.")

# Splitting strings: make a list of each medical record (they are all seperated by ;)

medical_data_split =  updated_medical_data.split(";")
print(medical_data_split)

# to make it easier to read we split each medical record in it's own list

medical_records =[]
for i in medical_data_split:
  medical_records.append(i.split(","))
print(medical_records)

# let's clean

# let's take out the unnecessary whitespaces
medical_records_clean = []
# outside loop that goes through each record in medical_records
for i in medical_records:
  # empty list that will store each cleaned record
  record_clean = []
  # nested loop to go through each item in each medical record
  for item in i:
    # cleaning the whitespace for each record using item.strip()
    record_clean.append(item.strip())
  # add the cleaned medical record to the medical_records_clean list
  medical_records_clean.append(record_clean)

print (medical_records_clean)

#Analizing Data
# what are the names of the individuals in uppercase characters
for i in medical_records_clean: 
   i[0]= i[0].upper()
   print(i[0])

# create a list for names, another list for ages, another list for bmi and a last list for insurance_costs

names =[]
ages =[]
bmis=[]
insurance_costs =[]

for i in medical_records_clean:
  names.append (i [0])
  ages.append(i[1])
  bmis.append(i[2])
  insurance_costs.append(i[3])

print("Names: " +str(names))
print("Ages: " +str(ages))
print("Bmis: " +str(bmis))
print("Insurance costs: " +str(insurance_costs))

#what is the average BMI?

total_bmi =0
for i in bmis: 
  total_bmi += float(i)

average_bmi = total_bmi / len(bmis)
print ("The average BMI: " + str(average_bmi))

#calculate the average insurance_costs
#we have to take out the $ sign first
insurance_cost_only_numbers = []
for i in insurance_costs:
  insurance_cost_only_numbers.append(i[1:])

total_insurance_costs = 0
for i in insurance_cost_only_numbers:
  total_insurance_costs += float(i)
average_insurance_cost =  total_insurance_costs / len(insurance_costs)
print ("The average insurance cost is: " + str
(average_insurance_cost))

#output a string for each individual that is clear to read
for i in range (0, len(medical_records_clean)):
  print("{} is {} years old with a BMI of {} and an insurance cost of {}.".format(names[i], ages[i], bmis[i],insurance_costs[i]))


#Using dictionary

# Storing patient names and insurance cost
medical_costs = {}

medical_costs.update({"Marina": 6607.0, "Vinay": 3225.0})
medical_costs.update({"Connie": 8886.0, "Isaac": 16444.0, "Valentina":6420.0})
print(medical_costs)
#change vinary's medical cost to 3325
medical_costs["Vinay"] = 3325.0
print(medical_costs)
#calculate average cost
total_cost = 0
for i in medical_costs:
  total_cost += medical_costs[i]

#or
#total_cost = 0
#for cost in medical_costs.values():
 # total_cost += cost

average_cost = total_cost / len(medical_costs)
print("Average Insurance Cost: "+ str(average_cost))

#Creating 2  lists: names and ages

names =["Marina", "Vinary", "Connie", "Isaac", "Valentina"]
ages=[27,24,43,35,52]

names_to_ages = {key: value for key, value in zip(names,ages)}
#zipped_ages = zip(names, ages)
#names_to_ages = {key: value for key, value in zipped_ages}
print (names_to_ages) 

#Marina's age
marina_age = names_to_ages.get("Marina", None)

print("Marina's age is " +str(marina_age))

#create a 3rd dictionary 
medical_records ={}
medical_records ["Marina"] = {"Age": 27, "Sex": "Female", "BMI": 31.1, "Children": 2, "Smoker": "Non-smoker", "Insurance_cost": 6607.0}
medical_records["Vinay"] = {"Age": 24, "Sex": "Male", "BMI": 26.9, "Children": 0, "Smoker": "Non-smoker", "Insurance_cost": 3225.0}
medical_records["Connie"] = {"Age": 43, "Sex": "Female", "BMI": 25.3, "Children": 3, "Smoker": "Non-smoker", "Insurance_cost": 8886.0}
medical_records["Isaac"] = {"Age": 35, "Sex": "Male", "BMI": 20.6, "Children": 4, "Smoker": "Smoker", "Insurance_cost": 16444.0}
medical_records["Valentina"] = {"Age": 52, "Sex": "Female", "BMI": 18.7, "Children": 1, "Smoker": "Non-smoker", "Insurance_cost": 6420.0}
print(medical_records)
print("Connie's insurance cost is " +str(medical_records["Connie"]["Insurance_cost"]) + "dollars.")
medical_records.pop("Vinay")

for i, k in medical_records.items():
  print(i + " is a " + str(k["Age"]) + \
  " year old " + k["Sex"] + " " + k["Smoker"] \
  + " with a BMI of " + str(k["BMI"]) + \
  " and insurance cost of " + str(k["Insurance_cost"]))

#This function first checks if the given name is already in the medical_records dictionary. If it is, it updates the existing entry with the new medical_data dictionary. If it isn't, it adds a new key-value pair to medical_records where the key is name and the value is medical_data.
def update_medical_records(name, medical_data):
    if name in medical_records:
        medical_records[name].update(medical_data)
    else:
        medical_records[name] = medical_data
    return medical_records
  
medical_data1 = {"Age": 37, "Sex": "Female", "BMI": 33.1, "Children": 4, "Smoker": "Non-smoker", "Insurance_cost": 6606.0}
updated_med_rec =update_medical_records("Maria", medical_data1)

print(updated_med_rec)

