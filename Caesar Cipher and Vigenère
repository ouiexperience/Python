# decoding a message using caesar cipher
message = "xuo jxuhu! jxyi yi qd unqcfbu ev q squiqh syfxuh. muhu oek qrbu je tusetu yj? y xefu ie! iudt cu q cuiiqwu rqsa myjx jxu iqcu evviuj!"


import string
alphabet = list(string.ascii_lowercase)
string_alphabet = ''.join(alphabet)
punctuation = list(string.punctuation)
string_punctuation =''.join(punctuation)
print(alphabet, punctuation )
print(string_alphabet)
print(string_punctuation)

real_message =""
for i in message:
    if i in alphabet:
        index_of_letter = string_alphabet.find(i)
        real_message += string_alphabet[(index_of_letter + 10)%26]
    else:
        real_message += i
        
print (real_message)


#Coding a message:
my_message = "This is a fun game!"
encrypted_message =""
for i in my_message:
    if i in alphabet:
        index_of_my_message = string_alphabet.find(i)
        encrypted_message += string_alphabet[(index_of_my_message -10)%26]
    else:
        encrypted_message += i
print (encrypted_message)

#functions for coding and decoding

new_message ="jxu evviuj veh jxu iusedt cuiiqwu yi vekhjuud."

def decoding_message(new_message, offset):
    real_message =""
    for i in new_message:
        if i in alphabet:
            index_of_letter = string_alphabet.find(i)
            real_message += string_alphabet[(index_of_letter + offset)%26]
        else:
            real_message += i
    print (real_message)
    
new_message ="jxu evviuj veh jxu iusedt cuiiqwu yi vekhjuud."   
decoding_message (new_message, 10)
new_message ="bqdradyuzs ygxfubxq omqemd oubtqde fa oapq kagd yqeemsqe ue qhqz yadq eqogdq!"
decoding_message (new_message, 14)

def coding_message(new_message, offset):
    encrypted_message =""
    for i in new_message:
        if i in alphabet:
            index_of_my_message = string_alphabet.find(i)
            encrypted_message += string_alphabet[(index_of_my_message -offset)%26]
        else:
            encrypted_message += i
    print (encrypted_message)
    
    
new_message = "This is a fun game!"
coding_message (new_message, 10)


# Whitout the shift Value
message_without_offset ="vhfinmxkl atox kxgwxkxw tee hy maxlx hew vbiaxkl tl hulhexmx. px'ee atox mh kxteer lmxi ni hnk ztfx by px ptgm mh dxxi hnk fxlltzxl ltyx."
for i in range(1,26):
    print("offset: " + str(i))
    print(decoding_message(message_without_offset, i))
    
#vigenere cipher

def decode_vigenere (message, keyword):
    keyword_letter =""
    pointer = 0
    for i in range(0, len (message)):
        if message[i] in string_alphabet:
            keyword_letter += keyword[pointer]
            pointer = (pointer +1)% len(keyword)
        else:
            keyword_letter += message[i]
    real_message =""              
    for i in range(0,len(message)):
        if message [i] in alphabet:
            real_m = string_alphabet.find(message[i]) - string_alphabet.find(keyword_letter[i])
            real_message += string_alphabet[real_m %26]
        else:
            real_message += message[i]
               
    return real_message            

    
new_message =" dfc aruw fsti gr vjtwhr wznj? vmph otis! cbx swv jipreneo uhllj kpi rahjib eg fjdkwkedhmp!" 
keyword ="friends"
print(decode_vigenere (new_message, keyword))

# code in vigenere

def code_vigenere (message, keyword):
    keyword_letter =""
    pointer = 0
    for i in range(0, len (message)):
        if message[i] in string_alphabet:
            keyword_letter += keyword[pointer]
            pointer = (pointer +1)% len(keyword)
        else:
            keyword_letter += message[i]
    real_message =""              
    for i in range(0,len(message)):
        if message [i] in alphabet:
            real_m = string_alphabet.find(message[i]) + string_alphabet.find(keyword_letter[i])
            real_message += string_alphabet[real_m %26]
        else:
            real_message += message[i]
               
    return real_message            

    
new_message =" you were able to decode this? nice work! you are becoming quite the expert at crytography!" 
keyword ="friends"
print(code_vigenere (new_message, keyword))
